Index: src/pages/posts/SearchResults.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { getPosts } from \"../../firebase/firestore\";\r\nimport PostCard from \"../../components/PostCard\";\r\nimport Loader from \"../../components/Loader\";\r\n\r\nfunction SearchResults() {\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const query = searchParams.get(\"q\");\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchPosts = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const result = await getPosts();\r\n        \r\n        if (result.success) {\r\n          // Simple client-side filtering for demo purposes\r\n          // In a real app, you'd want to use Firestore's full-text search or Algolia\r\n          const filteredPosts = result.data.filter(post => \r\n            post.title.toLowerCase().includes(query.toLowerCase()) ||\r\n            post.content.toLowerCase().includes(query.toLowerCase())\r\n          );\r\n          setPosts(filteredPosts);\r\n        } else {\r\n          setError(result.error);\r\n        }\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchPosts();\r\n  }, [query]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <div className=\"error-message\">{error}</div>;\r\n\r\n  return (\r\n    <div className=\"search-results\">\r\n      <div className=\"container\">\r\n        <h1>Search Results for \"{query}\"</h1>\r\n        \r\n        {posts.length > 0 ? (\r\n          <div className=\"posts-grid\">\r\n            {posts.map((post) => (\r\n              <PostCard key={post.id} post={post} />\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div className=\"no-results\">\r\n            <p>No posts found matching your search.</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchResults;
===================================================================
diff --git a/src/pages/posts/SearchResults.jsx b/src/pages/posts/SearchResults.jsx
--- a/src/pages/posts/SearchResults.jsx	(revision 93faeedc235021a901f73226eb93433491005cf0)
+++ b/src/pages/posts/SearchResults.jsx	(date 1745497771344)
@@ -14,16 +14,22 @@
 
   useEffect(() => {
     const fetchPosts = async () => {
+      if (!query) {
+        // If there's no query, return early with no results
+        setPosts([]);
+        setLoading(false);
+        return;
+      }
+
       try {
         setLoading(true);
         const result = await getPosts();
-        
+
         if (result.success) {
-          // Simple client-side filtering for demo purposes
-          // In a real app, you'd want to use Firestore's full-text search or Algolia
-          const filteredPosts = result.data.filter(post => 
-            post.title.toLowerCase().includes(query.toLowerCase()) ||
-            post.content.toLowerCase().includes(query.toLowerCase())
+          // Filtering posts based on query
+          const filteredPosts = result.data.filter(post =>
+              post.title.toLowerCase().includes(query.toLowerCase()) ||
+              post.content.toLowerCase().includes(query.toLowerCase())
           );
           setPosts(filteredPosts);
         } else {
@@ -35,32 +41,32 @@
         setLoading(false);
       }
     };
-    
+
     fetchPosts();
-  }, [query]);
+  }, [query]); // Re-run the effect when query changes
 
   if (loading) return <Loader />;
   if (error) return <div className="error-message">{error}</div>;
 
   return (
-    <div className="search-results">
-      <div className="container">
-        <h1>Search Results for "{query}"</h1>
-        
-        {posts.length > 0 ? (
-          <div className="posts-grid">
-            {posts.map((post) => (
-              <PostCard key={post.id} post={post} />
-            ))}
-          </div>
-        ) : (
-          <div className="no-results">
-            <p>No posts found matching your search.</p>
-          </div>
-        )}
-      </div>
-    </div>
+      <div className="search-results">
+        <div className="container">
+          <h1>Search Results for "{query}"</h1>
+
+          {posts.length > 0 ? (
+              <div className="posts-grid">
+                {posts.map((post) => (
+                    <PostCard key={post.id} post={post} />
+                ))}
+              </div>
+          ) : (
+              <div className="no-results">
+                <p>No posts found matching your search.</p>
+              </div>
+          )}
+        </div>
+      </div>
   );
 }
 
-export default SearchResults;
\ No newline at end of file
+export default SearchResults;
Index: src/pages/user/EditProfile.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { updateProfile } from \"firebase/auth\";\r\nimport { auth } from \"../../firebase/config\";\r\nimport { getUserById, updateUser } from \"../../firebase/firestore\";\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport Loader from \"../../components/Loader\";\r\n\r\nfunction EditProfile() {\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [bio, setBio] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [profileLoading, setProfileLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n  const { currentUser } = useAuth();\r\n\r\n  useEffect(() => {\r\n    const fetchProfile = async () => {\r\n      try {\r\n        const result = await getUserById(currentUser.uid);\r\n        \r\n        if (result.success) {\r\n          const userData = result.data;\r\n          setName(userData.displayName || \"\");\r\n          setEmail(userData.email || \"\");\r\n          setBio(userData.bio || \"\");\r\n        } else {\r\n          setError(result.error);\r\n        }\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setProfileLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchProfile();\r\n  }, [currentUser]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!name) {\r\n      return setError(\"Name is required\");\r\n    }\r\n    \r\n    setLoading(true);\r\n    setError(\"\");\r\n    \r\n    try {\r\n      // Update Firebase Auth profile\r\n      await updateProfile(auth.currentUser, {\r\n        displayName: name,\r\n      });\r\n      \r\n      // Update Firestore user document\r\n      const result = await updateUser(currentUser.uid, {\r\n        displayName: name,\r\n        bio,\r\n      });\r\n      \r\n      if (result.success) {\r\n        navigate(`/profile/${currentUser.uid}`);\r\n      } else {\r\n        throw new Error(result.error);\r\n      }\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (profileLoading) return <Loader />;\r\n\r\n  return (\r\n    <div className=\"edit-profile-page\">\r\n      <div className=\"container\">\r\n        <h1>Edit Profile</h1>\r\n        \r\n        {error && <div className=\"error-message\">{error}</div>}\r\n        \r\n        <form onSubmit={handleSubmit} className=\"profile-form\">\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"name\">Full Name</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"name\"\r\n              value={name}\r\n              onChange={(e) => setName(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"email\">Email</label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              disabled\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"bio\">Bio</label>\r\n            <textarea\r\n              id=\"bio\"\r\n              value={bio}\r\n              onChange={(e) => setBio(e.target.value)}\r\n              rows=\"4\"\r\n              placeholder=\"Tell your neighbors about yourself...\"\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"form-actions\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-outline\"\r\n              onClick={() => navigate(-1)}\r\n              disabled={loading}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type=\"submit\"\r\n              className=\"btn btn-primary\"\r\n              disabled={loading}\r\n            >\r\n              {loading ? <Loader small /> : \"Save Changes\"}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditProfile;
===================================================================
diff --git a/src/pages/user/EditProfile.jsx b/src/pages/user/EditProfile.jsx
--- a/src/pages/user/EditProfile.jsx	(revision 93faeedc235021a901f73226eb93433491005cf0)
+++ b/src/pages/user/EditProfile.jsx	(date 1745498045772)
@@ -1,142 +1,73 @@
 import { useState, useEffect } from "react";
-import { useNavigate } from "react-router-dom";
-import { updateProfile } from "firebase/auth";
-import { auth } from "../../firebase/config";
-import { getUserById, updateUser } from "../../firebase/firestore";
+import { Link } from "react-router-dom";
+import { getPosts } from "../../firebase/firestore";
 import { useAuth } from '../../context/AuthContext';
+import PostCard from "../../components/PostCard";
 import Loader from "../../components/Loader";
 
-function EditProfile() {
-  const [name, setName] = useState("");
-  const [email, setEmail] = useState("");
-  const [bio, setBio] = useState("");
-  const [error, setError] = useState("");
-  const [loading, setLoading] = useState(false);
-  const [profileLoading, setProfileLoading] = useState(true);
-  const navigate = useNavigate();
+function MyPosts() {
   const { currentUser } = useAuth();
+  const [posts, setPosts] = useState([]);
+  const [loading, setLoading] = useState(true);
+  const [error, setError] = useState("");
 
   useEffect(() => {
-    const fetchProfile = async () => {
+    if (!currentUser) {
+      setError("You must be logged in to view your posts.");
+      setLoading(false);
+      return;
+    }
+
+    const fetchPosts = async () => {
       try {
-        const result = await getUserById(currentUser.uid);
-        
+        setLoading(true);
+        const result = await getPosts(null, 50, null, currentUser.uid);
+
         if (result.success) {
-          const userData = result.data;
-          setName(userData.displayName || "");
-          setEmail(userData.email || "");
-          setBio(userData.bio || "");
+          setPosts(result.data);
         } else {
           setError(result.error);
         }
       } catch (err) {
-        setError(err.message);
+        setError("Error fetching posts. Please try again later.");
       } finally {
-        setProfileLoading(false);
+        setLoading(false);
       }
     };
-    
-    fetchProfile();
+
+    fetchPosts();
   }, [currentUser]);
 
-  const handleSubmit = async (e) => {
-    e.preventDefault();
-    
-    if (!name) {
-      return setError("Name is required");
-    }
-    
-    setLoading(true);
-    setError("");
-    
-    try {
-      // Update Firebase Auth profile
-      await updateProfile(auth.currentUser, {
-        displayName: name,
-      });
-      
-      // Update Firestore user document
-      const result = await updateUser(currentUser.uid, {
-        displayName: name,
-        bio,
-      });
-      
-      if (result.success) {
-        navigate(`/profile/${currentUser.uid}`);
-      } else {
-        throw new Error(result.error);
-      }
-    } catch (err) {
-      setError(err.message);
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  if (profileLoading) return <Loader />;
+  if (loading) return <Loader />;
+  if (error) return <div className="error-message">{error}</div>;
 
   return (
-    <div className="edit-profile-page">
-      <div className="container">
-        <h1>Edit Profile</h1>
-        
-        {error && <div className="error-message">{error}</div>}
-        
-        <form onSubmit={handleSubmit} className="profile-form">
-          <div className="form-group">
-            <label htmlFor="name">Full Name</label>
-            <input
-              type="text"
-              id="name"
-              value={name}
-              onChange={(e) => setName(e.target.value)}
-              required
-            />
+      <div className="my-posts-page">
+        <div className="container">
+          <div className="page-header">
+            <h1>My Posts</h1>
+            <Link to="/create-post" className="btn btn-primary">
+              Create New Post
+            </Link>
           </div>
-          
-          <div className="form-group">
-            <label htmlFor="email">Email</label>
-            <input
-              type="email"
-              id="email"
-              value={email}
-              onChange={(e) => setEmail(e.target.value)}
-              disabled
-            />
-          </div>
-          
-          <div className="form-group">
-            <label htmlFor="bio">Bio</label>
-            <textarea
-              id="bio"
-              value={bio}
-              onChange={(e) => setBio(e.target.value)}
-              rows="4"
-              placeholder="Tell your neighbors about yourself..."
-            />
-          </div>
-          
-          <div className="form-actions">
-            <button
-              type="button"
-              className="btn btn-outline"
-              onClick={() => navigate(-1)}
-              disabled={loading}
-            >
-              Cancel
-            </button>
-            <button
-              type="submit"
-              className="btn btn-primary"
-              disabled={loading}
-            >
-              {loading ? <Loader small /> : "Save Changes"}
-            </button>
-          </div>
-        </form>
+
+          {posts.length > 0 ? (
+              <div className="posts-grid">
+                {posts.map((post) => (
+                    <PostCard key={post.id} post={post} />
+                ))}
+              </div>
+          ) : (
+              <div className="no-posts">
+                <p>You haven't posted anything yet.</p>
+                <Link to="/create-post" className="btn btn-primary">
+                  Create Your First Post
+                </Link>
+              </div>
+          )}
+        </div>
       </div>
-    </div>
   );
 }
 
-export default EditProfile;
\ No newline at end of file
+export default MyPosts;
Index: src/pages/user/Profile.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useState, useEffect } from \"react\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport { getUserById, getPosts } from \"../../firebase/firestore\";\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport PostCard from \"../../components/PostCard\";\r\nimport Loader from \"../../components/Loader\";\r\n\r\nfunction Profile() {\r\n  const { id } = useParams();\r\n  const [user, setUser] = useState(null);\r\n  const [posts, setPosts] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n  const { currentUser } = useAuth();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        // Fetch user data\r\n        const userResult = await getUserById(id);\r\n        if (!userResult.success) {\r\n          throw new Error(userResult.error);\r\n        }\r\n        setUser(userResult.data);\r\n        \r\n        // Fetch user's posts\r\n        const postsResult = await getPosts(null, 10, null, id);\r\n        if (!postsResult.success) {\r\n          throw new Error(postsResult.error);\r\n        }\r\n        setPosts(postsResult.data);\r\n        \r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchData();\r\n  }, [id]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <div className=\"error-message\">{error}</div>;\r\n  if (!user) return <div>User not found</div>;\r\n\r\n  const isCurrentUser = currentUser && currentUser.uid === id;\r\n\r\n  return (\r\n    <div className=\"profile-page\">\r\n      <div className=\"container\">\r\n        <div className=\"profile-header\">\r\n          <div className=\"profile-avatar\">\r\n            <div className=\"avatar-placeholder\">\r\n              {user.displayName?.charAt(0).toUpperCase() || \"U\"}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"profile-info\">\r\n            <h1>{user.displayName || \"Anonymous\"}</h1>\r\n            <p className=\"profile-email\">{user.email}</p>\r\n            <p className=\"profile-joined\">\r\n              Member since {new Date(user.createdAt?.toDate()).toLocaleDateString()}\r\n            </p>\r\n            \r\n            {isCurrentUser && (\r\n              <Link to=\"/edit-profile\" className=\"btn btn-outline\">\r\n                Edit Profile\r\n              </Link>\r\n            )}\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"profile-content\">\r\n          <h2>Recent Posts</h2>\r\n          \r\n          {posts.length > 0 ? (\r\n            <div className=\"posts-grid\">\r\n              {posts.map((post) => (\r\n                <PostCard key={post.id} post={post} />\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div className=\"no-posts\">\r\n              {isCurrentUser ? (\r\n                <p>You haven't posted anything yet. <Link to=\"/create-post\">Create your first post</Link></p>\r\n              ) : (\r\n                <p>This user hasn't posted anything yet.</p>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;
===================================================================
diff --git a/src/pages/user/Profile.jsx b/src/pages/user/Profile.jsx
--- a/src/pages/user/Profile.jsx	(revision 93faeedc235021a901f73226eb93433491005cf0)
+++ b/src/pages/user/Profile.jsx	(date 1745497995258)
@@ -15,30 +15,29 @@
 
   useEffect(() => {
     const fetchData = async () => {
-      try {
-        setLoading(true);
-        
+      setLoading(true);
+      try {
         // Fetch user data
         const userResult = await getUserById(id);
         if (!userResult.success) {
           throw new Error(userResult.error);
         }
         setUser(userResult.data);
-        
-        // Fetch user's posts
+
+        // Fetch posts by the user
         const postsResult = await getPosts(null, 10, null, id);
         if (!postsResult.success) {
           throw new Error(postsResult.error);
         }
         setPosts(postsResult.data);
-        
+
       } catch (err) {
         setError(err.message);
       } finally {
         setLoading(false);
       }
     };
-    
+
     fetchData();
   }, [id]);
 
@@ -46,55 +45,56 @@
   if (error) return <div className="error-message">{error}</div>;
   if (!user) return <div>User not found</div>;
 
+  // Check if the current user is the same as the viewed user
   const isCurrentUser = currentUser && currentUser.uid === id;
 
   return (
-    <div className="profile-page">
-      <div className="container">
-        <div className="profile-header">
-          <div className="profile-avatar">
-            <div className="avatar-placeholder">
-              {user.displayName?.charAt(0).toUpperCase() || "U"}
-            </div>
-          </div>
-          
-          <div className="profile-info">
-            <h1>{user.displayName || "Anonymous"}</h1>
-            <p className="profile-email">{user.email}</p>
-            <p className="profile-joined">
-              Member since {new Date(user.createdAt?.toDate()).toLocaleDateString()}
-            </p>
-            
-            {isCurrentUser && (
-              <Link to="/edit-profile" className="btn btn-outline">
-                Edit Profile
-              </Link>
-            )}
-          </div>
-        </div>
-        
-        <div className="profile-content">
-          <h2>Recent Posts</h2>
-          
-          {posts.length > 0 ? (
-            <div className="posts-grid">
-              {posts.map((post) => (
-                <PostCard key={post.id} post={post} />
-              ))}
-            </div>
-          ) : (
-            <div className="no-posts">
-              {isCurrentUser ? (
-                <p>You haven't posted anything yet. <Link to="/create-post">Create your first post</Link></p>
-              ) : (
-                <p>This user hasn't posted anything yet.</p>
-              )}
-            </div>
-          )}
-        </div>
-      </div>
-    </div>
+      <div className="profile-page">
+        <div className="container">
+          <div className="profile-header">
+            <div className="profile-avatar">
+              <div className="avatar-placeholder">
+                {user.displayName?.charAt(0).toUpperCase() || "U"}
+              </div>
+            </div>
+
+            <div className="profile-info">
+              <h1>{user.displayName || "Anonymous"}</h1>
+              <p className="profile-email">{user.email}</p>
+              <p className="profile-joined">
+                Member since {user.createdAt ? new Date(user.createdAt?.toDate()).toLocaleDateString() : "Unknown"}
+              </p>
+
+              {isCurrentUser && (
+                  <Link to="/edit-profile" className="btn btn-outline">
+                    Edit Profile
+                  </Link>
+              )}
+            </div>
+          </div>
+
+          <div className="profile-content">
+            <h2>Recent Posts</h2>
+
+            {posts.length > 0 ? (
+                <div className="posts-grid">
+                  {posts.map((post) => (
+                      <PostCard key={post.id} post={post} />
+                  ))}
+                </div>
+            ) : (
+                <div className="no-posts">
+                  {isCurrentUser ? (
+                      <p>You haven't posted anything yet. <Link to="/create-post">Create your first post</Link></p>
+                  ) : (
+                      <p>This user hasn't posted anything yet.</p>
+                  )}
+                </div>
+            )}
+          </div>
+        </div>
+      </div>
   );
 }
 
-export default Profile;
\ No newline at end of file
+export default Profile;
